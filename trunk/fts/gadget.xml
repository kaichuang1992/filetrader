<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="FT"
               author="FranÃ§ois Kooman"
               author_email="fkooman@tuxed.net">
    <Require feature="dynamic-height"/>
    <Require feature="opensocial-0.9"/>
    <Require feature="osapi"/>
    <Require feature="opensocial-templates"/>
  </ModulePrefs>
  <UserPref name="groupContext"/>	<!-- for SURFconext -->
  <Content type="html">
<![CDATA[
<style type="text/css">
div#ft_output {
    font-size: 85%;
    font-family: sans-serif;
    margin: 0;
    padding: 0;
    height: 300px;
    overflow: auto;
}
a.dir {
    font-weight: bold;
}
table {
    width: 100%;
    background-color: #fff;
}
th{
    text-align: left;
}
span#path {
	float: right;
}
span#progress {
	position: absolute;
	right: 0;
	bottom: 0;
}
button {
	font-size: 85%;
}
input {
	font-size: 85%;
}
</style>
<script type="text/javascript">

    <!-- for SURFconext -->
    // var prefs = new gadgets.Prefs();
    // var groupContext = escape(prefs.getString('groupContext'));
    <!-- /for SURFconext -->

    /* Should get this from gadget data... */
    var apiEndPoint = "https://frkosp.wind.surfnet.nl/fts/index.php";

    function pingServer() {
        var params = {};
        var url = apiEndPoint + "?action=pingServer";
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        gadgets.io.makeRequest(url, function(response) { 
            return response.data.ok;
        }, params);
    };

    function serverInfo() {
        var params = {};
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
        var url = apiEndPoint + "?action=serverInfo";
        gadgets.io.makeRequest(url, function(response) { 
            output = "";
            for(var i in response.data) {
		if(i==='availableSpace') {
	            output += i + ": " + toHumanSize(response.data[i]) + "\n";

		} else {
	            output += i + ": " + response.data[i] + "\n";
	        }
            }
	//    updateOutput(output);
	   alert(output);
        }, params);
    };

    function parentDirectory(relativePath) {
        var lastSlash = relativePath.lastIndexOf('/');
        if (lastSlash > 0) {
            relativePath = relativePath.substring(0, lastSlash);
        }
        getDirList(relativePath);
    }

    function getDirList(relativePath) {
        var params = {};
        params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        var url = apiEndPoint + "?action=getDirList&relativePath=" + relativePath;
        gadgets.io.makeRequest(url, function(response) {
            var output = '<span id="progress"></span><span id="path">('+ relativePath + ')</span>';
            output += "<button onclick=\"javascript:parentDirectory('" + relativePath + "')\">Up...</button>";
            output += "<input id=\"inputFiles\" type=\"file\" onchange=\"javascript:getUploadToken('" + relativePath + "',this.files[0])\">";
	    output += "<button onclick=\"javascript:serverInfo()\">About Server</button>";
            output += '<table><tr><th>Name</th><th>Size</th></tr>';
	    for(var i in response.data) {
                if(response.data[i] && !response.data[i].fileName) {
                } else if(response.data[i].isDirectory) {
                    output += "<tr><td><a class=\"dir\" href=\"javascript:getDirList('" + relativePath + '/' + response.data[i].fileName + "')\">" + response.data[i].fileName + '</a></td><td>&nbsp;</td></tr>';
                } else { 
                output += "<tr><td><a class=\"file\" href=\"javascript:getDownloadToken('" + relativePath + '/' + response.data[i].fileName + "')\">" + response.data[i].fileName + '</a></td><td>' + toHumanSize(response.data[i].fileSize) + '</td></tr>';
                }
            }
            output += "</table>";
            updateOutput(output);
        }, params);
    };

    function getUploadToken(relativePath, file) {
        var postdata = { relativePath : relativePath + '/' + file.name, fileSize : file.size };
        var params = {};
        params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
        params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(postdata);
        var url = apiEndPoint + "?action=getUploadToken";
        gadgets.io.makeRequest(url, function(response) {
            var uploadUrl = response.data.uploadLocation;
            //alert(uploadUrl);
            var xhr = new XMLHttpRequest();
            xhr.upload.addEventListener("progress", function(evt) {
                if (evt.lengthComputable) {
                    var percentComplete = Math.round(evt.loaded / evt.total * 100);
                    document.getElementById('progress').innerHTML = percentComplete + "%";
                }
            }, false);
            xhr.upload.addEventListener("load", function(evt) {
                document.getElementById('progress').innerHTML = 'Complete!';
                getDirList(relativePath);
            }, false);
            xhr.open("PUT", uploadUrl, true);
            xhr.send(file);
        }, params);
    };

    function getDownloadToken(relativePath) {
	var postdata = { relativePath : relativePath };
        var params = {};
        params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
        params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(postdata);
        var url = apiEndPoint + "?action=getDownloadToken";
        gadgets.io.makeRequest(url, function(response) {
            window.location.href = response.data.downloadLocation;
        }, params);
    };
    
    function createDirectory(relativePath) {
        var postdata = { relativePath : relativePath };
        var params = {};
        params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
        params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
        params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
        params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(postdata);
        var url = apiEndPoint + "?action=createDirectory";
        gadgets.io.makeRequest(url, function(response) { 
            document.getElementById('ft_output').innerHTML = response.text;
        }, params);
    };
    
    function updateOutput(output) {
        document.getElementById('ft_output').innerHTML = output;
        gadgets.window.adjustHeight();
    }

function toHumanSize(bytes) {
    var kilobyte = 1024;
    var megabyte = kilobyte * kilobyte;
    var gigabyte = megabyte * kilobyte;

    if (bytes >= gigabyte)
        return Math.round((bytes / gigabyte)) + "GB";
    if (bytes >= megabyte)
        return Math.round((bytes / megabyte)) + "MB";
    if (bytes >= kilobyte)
        return Math.round((bytes / kilobyte)) + "kB";
    return bytes;
}

    getDirList('/');
//    serverInfo();
</script>
<div id="ft_output"></div>
]]>
  </Content>
</Module>
