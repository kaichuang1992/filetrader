-- REQUIREMENTS --
* php-pecl-oauth (http://pecl.php.net/package/oauth)
	==> Fedora Package (php-pecl-oauth)
		Not yet in Fedora
		SRPM available at http://fkooman.fedorapeople.org/php-pecl-oauth
		Package Review: https://bugzilla.redhat.com/show_bug.cgi?id=710751

	==> Debian Package
		Not in Debian as far as I know (use "pecl install oauth")
		
* mod_xsendfile (+ web server configuration!)
	==> Fedora Package (mod_xsendfile)

	==> Debian Package (libapache2-mod-xsendfile)

* php-pdo (+ sqlite)
	==> Fedora Package (php-pdo)
		In Fedora this package contains the SQlite driver

	==> Debian Package (php5-sqlite)
		Also contains SQlite PDO driver

* 64 bit OS and PHP installation (for >2G file support)

-- INSTALLATION --

It is assumed you placed the source files of fts in /var/www/html/fts. This
is the default directory on Red Hat based systems. On Debian this would
be /var/www/fts.
 
# create data directory
$ mkdir -p data/files

# set unix permissions
$ chmod o+w -R data

*** WARNING ***
Make sure the data directory is not accessible through the web browser,
use a .htaccess file to limit access to directory structure!

        echo "Deny from all" > data/.htaccess

Make sure Apache allows the use of "Limit" as override in your (virtual host)
directory:

        AllowOverride Limit

--- SELinux Configuration ---
Set the correct SELinux labels (only for Fedora/Red Hat systems?)

$ chcon -R -t httpd_sys_rw_content_t data

-- CONFIGURATION --

Copy config.php.default to config.php and modify it for your situation.

In order to configure OAuth consumer/keys it is recommended to use a 
reasonable length secrets.

For example you can use OpenSSL to generate a key/secret:

$ openssl rand -hex 16

(This creates a 16 byte, 128 bit key encoded in the hexadecimal system)

As an example below, the consumer key is 28...52 and the secret is 5e...b1:

$config['oauth_consumers'] = array (
        '2879d2f782aab6d022b7e2a97f7b9b52' => '5e3ba9d19d55ae4c1361059fe4e409b1',
);

Note: This is a shared secret that should be configured in the remote service
accessing this service.

To support the X-Sendfile header Apache needs to be configured to allow for this
header. Set:

    XSendFile on

    # on Debian (SendFile module 0.9) you seem to need this option as well:
    ### XSendFileAllowAbove on

In the (virtual) directory configuration containing the scripts (see https://tn123.org/mod_xsendfile/). 

For example:

<Directory "/var/www/html">
    Options Indexes FollowSymLinks
    AllowOverride Limit
    XSendFile on
    # on Debian (SendFile module 0.9) you seem to need this option as well:
    ### XSendFileAllowAbove on
    Order allow,deny
    Allow from all
</Directory>

--- ISSUES ---

We are using a persistent database connection to the SQlite file, which means that 
if you remove the file from the file system writing to the database still seems 
to work, but reading from it fails or something like that... A solution is to
restart Apache/PHP when doing this...

